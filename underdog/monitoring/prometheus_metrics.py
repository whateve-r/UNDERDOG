"""
Prometheus Metrics for UNDERDOG Trading System
===============================================

Exposes real-time metrics from 7 EAs for Grafana monitoring.

ARCHITECTURE:
-------------
    7 EAs → Prometheus Client → Prometheus Server → Grafana

METRICS EXPOSED:
----------------
1. Trade Signals (Counter): Total signals generated per EA
2. Open Positions (Gauge): Current open positions per EA
3. P&L (Gauge): Profit/Loss per EA in USD
4. Account Balance (Gauge): Current account balance
5. Account Equity (Gauge): Current account equity
6. Drawdown (Gauge): Daily/Total drawdown percentage
7. Execution Time (Histogram): EA signal generation latency
8. Confidence Score (Gauge): Last signal confidence per EA
9. Win Rate (Gauge): Historical win rate per EA
10. Broker Connection (Gauge): Broker connection status

USAGE:
------
    from underdog.monitoring.prometheus_metrics import (
        start_metrics_server,
        ea_signals_total,
        ea_confidence
    )
    
    # Start server once (in main script)
    start_metrics_server(port=8000)
    
    # Increment signal counter
    ea_signals_total.labels(
        ea_name="SuperTrendRSI",
        signal_type="BUY"
    ).inc()
    
    # Update confidence
    ea_confidence.labels(ea_name="SuperTrendRSI").set(0.95)

PROMETHEUS SCRAPING:
--------------------
Add to prometheus.yml:
    scrape_configs:
      - job_name: 'underdog-trading'
        static_configs:
          - targets: ['host.docker.internal:8000']
"""

from prometheus_client import (
    Counter, Gauge, Histogram, Info,
    start_http_server, generate_latest
)
import time
from typing import Dict, Optional
import logging

logger = logging.getLogger(__name__)

# ==================== TRADE SIGNALS ====================

ea_signals_total = Counter(
    'underdog_ea_signals_total',
    'Total trading signals generated by each EA',
    ['ea_name', 'signal_type', 'symbol']
)

ea_signals_executed = Counter(
    'underdog_ea_signals_executed_total',
    'Total signals actually executed (orders placed)',
    ['ea_name', 'signal_type', 'symbol']
)

ea_signals_rejected = Counter(
    'underdog_ea_signals_rejected_total',
    'Total signals rejected by risk manager',
    ['ea_name', 'reason']
)

# ==================== POSITIONS & P&L ====================

ea_positions_open = Gauge(
    'underdog_ea_positions_open',
    'Current number of open positions per EA',
    ['ea_name', 'symbol']
)

ea_pnl_unrealized = Gauge(
    'underdog_ea_pnl_unrealized_usd',
    'Unrealized P&L per EA in USD',
    ['ea_name']
)

ea_pnl_realized = Gauge(
    'underdog_ea_pnl_realized_usd',
    'Realized P&L per EA in USD (since start)',
    ['ea_name']
)

ea_pnl_daily = Gauge(
    'underdog_ea_pnl_daily_usd',
    'Daily P&L per EA in USD',
    ['ea_name']
)

# ==================== ACCOUNT METRICS ====================

account_balance = Gauge(
    'underdog_account_balance_usd',
    'Current account balance in USD',
    ['broker', 'account_id']
)

account_equity = Gauge(
    'underdog_account_equity_usd',
    'Current account equity in USD',
    ['broker', 'account_id']
)

account_margin_used = Gauge(
    'underdog_account_margin_used_usd',
    'Margin currently used in USD',
    ['broker', 'account_id']
)

account_margin_free = Gauge(
    'underdog_account_margin_free_usd',
    'Free margin available in USD',
    ['broker', 'account_id']
)

# ==================== DRAWDOWN ====================

drawdown_daily_pct = Gauge(
    'underdog_drawdown_daily_pct',
    'Current daily drawdown percentage',
    []
)

drawdown_total_pct = Gauge(
    'underdog_drawdown_total_pct',
    'Current total drawdown percentage from all-time high',
    []
)

drawdown_daily_usd = Gauge(
    'underdog_drawdown_daily_usd',
    'Current daily drawdown in USD',
    []
)

drawdown_total_usd = Gauge(
    'underdog_drawdown_total_usd',
    'Current total drawdown in USD',
    []
)

drawdown_alert_triggered = Counter(
    'underdog_drawdown_alert_triggered_total',
    'Total drawdown alerts triggered',
    ['severity', 'drawdown_type']
)

# ==================== PERFORMANCE METRICS ====================

ea_execution_time_ms = Histogram(
    'underdog_ea_execution_time_ms',
    'EA signal generation execution time in milliseconds',
    ['ea_name'],
    buckets=[0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0]
)

ea_confidence_score = Gauge(
    'underdog_ea_confidence_score',
    'Last signal confidence score (0.0-1.0)',
    ['ea_name']
)

ea_win_rate = Gauge(
    'underdog_ea_win_rate',
    'Historical win rate per EA (0.0-1.0)',
    ['ea_name']
)

ea_sharpe_ratio = Gauge(
    'underdog_ea_sharpe_ratio',
    'Sharpe ratio per EA (rolling calculation)',
    ['ea_name']
)

ea_profit_factor = Gauge(
    'underdog_ea_profit_factor',
    'Profit factor per EA (gross profit / gross loss)',
    ['ea_name']
)

# ==================== BROKER CONNECTIVITY ====================

broker_connection_status = Gauge(
    'underdog_broker_connection_status',
    'Broker connection status (1=connected, 0=disconnected)',
    ['broker', 'account_id']
)

broker_ping_ms = Gauge(
    'underdog_broker_ping_ms',
    'Broker API ping latency in milliseconds',
    ['broker']
)

broker_order_latency_ms = Histogram(
    'underdog_broker_order_latency_ms',
    'Order execution latency in milliseconds',
    ['broker', 'order_type'],
    buckets=[10, 50, 100, 200, 500, 1000, 2000, 5000]
)

broker_errors_total = Counter(
    'underdog_broker_errors_total',
    'Total broker API errors',
    ['broker', 'error_type']
)

# ==================== SYSTEM HEALTH ====================

system_uptime_seconds = Gauge(
    'underdog_system_uptime_seconds',
    'System uptime in seconds',
    []
)

system_cpu_usage_pct = Gauge(
    'underdog_system_cpu_usage_pct',
    'CPU usage percentage',
    []
)

system_memory_usage_mb = Gauge(
    'underdog_system_memory_usage_mb',
    'Memory usage in MB',
    []
)

ea_active_count = Gauge(
    'underdog_ea_active_count',
    'Number of currently active EAs',
    []
)

ea_status = Gauge(
    'underdog_ea_status',
    'EA status (1=active, 0=inactive)',
    ['ea_name']
)

# ==================== PROP FIRM COMPLIANCE ====================

propfirm_daily_loss_limit_pct = Gauge(
    'underdog_propfirm_daily_loss_limit_pct',
    'Daily loss limit percentage for prop firm account',
    ['propfirm']
)

propfirm_total_loss_limit_pct = Gauge(
    'underdog_propfirm_total_loss_limit_pct',
    'Total loss limit percentage for prop firm account',
    ['propfirm']
)

propfirm_rule_violations = Counter(
    'underdog_propfirm_rule_violations_total',
    'Total prop firm rule violations',
    ['propfirm', 'rule_type']
)

propfirm_challenge_progress_pct = Gauge(
    'underdog_propfirm_challenge_progress_pct',
    'Challenge progress percentage (for funded challenges)',
    ['propfirm', 'challenge_id']
)

# ==================== INFO METRICS ====================

system_info = Info(
    'underdog_system_info',
    'System information'
)

ea_info = Info(
    'underdog_ea_info',
    'EA configuration information'
)

# ==================== SERVER MANAGEMENT ====================

_server_started = False
_start_time = time.time()

def start_metrics_server(port: int = 8000, update_interval: int = 1):
    """
    Start Prometheus metrics HTTP server.
    
    Args:
        port: Port to expose metrics (default: 8000)
        update_interval: How often to update system metrics (seconds)
    
    Example:
        >>> start_metrics_server(port=8000)
        ✅ Prometheus metrics server started on port 8000
        📊 Metrics available at: http://localhost:8000/metrics
    """
    global _server_started
    
    if _server_started:
        logger.warning(f"⚠️ Metrics server already running")
        return
    
    try:
        # Listen on 0.0.0.0 to accept connections from Docker containers
        start_http_server(port, addr='0.0.0.0')
        _server_started = True
        
        # Set system info
        system_info.info({
            'version': '4.0.0',
            'architecture': 'local_monitoring',
            'stack': 'talib+prometheus+grafana+streamlit'
        })
        
        logger.info(f"✅ Prometheus metrics server started on 0.0.0.0:{port}")
        logger.info(f"📊 Metrics available at: http://localhost:{port}/metrics")
        
    except OSError as e:
        logger.error(f"❌ Failed to start metrics server on port {port}: {e}")
        raise

def update_system_metrics():
    """Update system-level metrics (called periodically)"""
    import psutil
    
    # Uptime
    uptime = time.time() - _start_time
    system_uptime_seconds.set(uptime)
    
    # CPU & Memory
    system_cpu_usage_pct.set(psutil.cpu_percent(interval=0.1))
    system_memory_usage_mb.set(psutil.Process().memory_info().rss / 1024 / 1024)

def set_ea_info(ea_name: str, config: Dict):
    """
    Set EA configuration info.
    
    Args:
        ea_name: Name of the EA
        config: Configuration dictionary
    
    Example:
        >>> set_ea_info("SuperTrendRSI", {
        ...     "rsi_period": "14",
        ...     "atr_multiplier": "2.0",
        ...     "confidence": "1.0"
        ... })
    """
    ea_info.labels(ea_name=ea_name).info({
        str(k): str(v) for k, v in config.items()
    })

# ==================== HELPER FUNCTIONS ====================

def record_signal(
    ea_name: str,
    signal_type: str,
    symbol: str,
    confidence: float,
    executed: bool = True
):
    """
    Record a trading signal (convenience function).
    
    Args:
        ea_name: Name of the EA
        signal_type: "BUY" or "SELL"
        symbol: Trading symbol (e.g., "EURUSD")
        confidence: Signal confidence (0.0-1.0)
        executed: Whether signal was executed
    
    Example:
        >>> record_signal("SuperTrendRSI", "BUY", "EURUSD", 0.95, True)
    """
    # Increment total signals
    ea_signals_total.labels(
        ea_name=ea_name,
        signal_type=signal_type,
        symbol=symbol
    ).inc()
    
    # Update confidence
    ea_confidence_score.labels(ea_name=ea_name).set(confidence)
    
    # Increment executed if applicable
    if executed:
        ea_signals_executed.labels(
            ea_name=ea_name,
            signal_type=signal_type,
            symbol=symbol
        ).inc()

def record_execution_time(ea_name: str, duration_ms: float):
    """
    Record EA execution time.
    
    Args:
        ea_name: Name of the EA
        duration_ms: Execution time in milliseconds
    
    Example:
        >>> record_execution_time("SuperTrendRSI", 0.45)
    """
    ea_execution_time_ms.labels(ea_name=ea_name).observe(duration_ms)

def update_position_count(ea_name: str, symbol: str, count: int):
    """
    Update open position count for EA.
    
    Args:
        ea_name: Name of the EA
        symbol: Trading symbol
        count: Number of open positions
    
    Example:
        >>> update_position_count("SuperTrendRSI", "EURUSD", 2)
    """
    ea_positions_open.labels(ea_name=ea_name, symbol=symbol).set(count)

def update_pnl(ea_name: str, unrealized: float, realized: float, daily: float):
    """
    Update P&L metrics for EA.
    
    Args:
        ea_name: Name of the EA
        unrealized: Unrealized P&L in USD
        realized: Realized P&L in USD (since start)
        daily: Daily P&L in USD
    
    Example:
        >>> update_pnl("SuperTrendRSI", 125.50, 850.00, 45.20)
    """
    ea_pnl_unrealized.labels(ea_name=ea_name).set(unrealized)
    ea_pnl_realized.labels(ea_name=ea_name).set(realized)
    ea_pnl_daily.labels(ea_name=ea_name).set(daily)

def update_account_metrics(
    broker: str,
    account_id: str,
    balance: float,
    equity: float,
    margin_used: float,
    margin_free: float
):
    """
    Update account-level metrics.
    
    Args:
        broker: Broker name (e.g., "FTMO", "MT5_Demo")
        account_id: Account ID
        balance: Account balance in USD
        equity: Account equity in USD
        margin_used: Margin used in USD
        margin_free: Free margin in USD
    
    Example:
        >>> update_account_metrics(
        ...     "FTMO", "12345678",
        ...     10250.00, 10180.00, 500.00, 9680.00
        ... )
    """
    account_balance.labels(broker=broker, account_id=account_id).set(balance)
    account_equity.labels(broker=broker, account_id=account_id).set(equity)
    account_margin_used.labels(broker=broker, account_id=account_id).set(margin_used)
    account_margin_free.labels(broker=broker, account_id=account_id).set(margin_free)

def update_drawdown(daily_pct: float, total_pct: float, daily_usd: float, total_usd: float):
    """
    Update drawdown metrics.
    
    Args:
        daily_pct: Daily drawdown percentage
        total_pct: Total drawdown percentage
        daily_usd: Daily drawdown in USD
        total_usd: Total drawdown in USD
    
    Example:
        >>> update_drawdown(-1.2, -3.5, -120.0, -350.0)
    """
    drawdown_daily_pct.set(daily_pct)
    drawdown_total_pct.set(total_pct)
    drawdown_daily_usd.set(daily_usd)
    drawdown_total_usd.set(total_usd)

def record_broker_error(broker: str, error_type: str):
    """
    Record broker API error.
    
    Args:
        broker: Broker name
        error_type: Error type (e.g., "connection", "timeout", "rejected")
    
    Example:
        >>> record_broker_error("FTMO", "timeout")
    """
    broker_errors_total.labels(broker=broker, error_type=error_type).inc()

def update_broker_connection(broker: str, account_id: str, connected: bool):
    """
    Update broker connection status.
    
    Args:
        broker: Broker name
        account_id: Account ID
        connected: True if connected, False if disconnected
    
    Example:
        >>> update_broker_connection("FTMO", "12345678", True)
    """
    broker_connection_status.labels(
        broker=broker,
        account_id=account_id
    ).set(1 if connected else 0)

# ==================== EXAMPLE USAGE ====================

if __name__ == "__main__":
    # Start server
    start_metrics_server(port=8000)
    
    # Simulate some metrics
    print("📊 Simulating metrics for 60 seconds...")
    
    for i in range(60):
        # Simulate signals
        if i % 10 == 0:
            record_signal("SuperTrendRSI", "BUY", "EURUSD", 0.95, True)
        
        # Update account
        update_account_metrics(
            "MT5_Demo", "12345678",
            10000 + i * 10,
            10000 + i * 9,
            500, 9500 + i * 9
        )
        
        # Update drawdown
        update_drawdown(-0.5 - i * 0.01, -2.0, -50 - i, -200)
        
        # Update system metrics
        update_system_metrics()
        
        time.sleep(1)
    
    print("✅ Done! Check metrics at http://localhost:8000/metrics")
